{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","components/Quotes.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","defineProperty","getOwnPropertyDescriptors","defineProperties","emptyCards","Card","Body","Title","Text","Footer","Quotes","props","getAllQuotes","api","then","res","console","log","status","setLogginState","Array","isArray","data","quotes","setQuotesState","catch","err","setState","assign","state","newQuote","author","body","isLoggedIn","quotesComment","Map","setNewQuote","bind","postQuote","this","BroadcastChannel","onmessage","message","finished","event","preventDefault","response","quoteId","has","text","get","newLogginState","prevState","id","value","set","Container","to","map","quote","index","className","title","Form","onSubmit","postQuoteComment","postId","Row","Col","xs","Label","htmlFor","srOnly","Control","placeholder","getIniitalComment","onChange","setQuoteComment","Button","type","variant","size","Layout","md","span","offset","role","Group","controlId","as","rows","React","Component"],"mappings":"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","file":"static/js/8.5c648086.chunk.js","sourcesContent":["import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import React from 'react';\r\nimport '../css/Quotes.css';\r\nimport { Col, Card, Container, Form, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport api from '../api/api';\r\nimport Layout from '../hoc/Layout/Layout';\r\n\r\nconst emptyCards = [];\r\nfor (let i = 0; i < 5; i++) {\r\n  emptyCards.push((\r\n    <div>\r\n      <Card key={i}>\r\n        <Card.Body>\r\n          <Card.Title>\r\n            <p></p>\r\n          </Card.Title>\r\n          <Card.Text>\r\n            <br />\r\n          </Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Card.Text>\r\n            <br />\r\n          </Card.Text>\r\n        </Card.Footer>\r\n      </Card>\r\n      <br />\r\n      <br />\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default class Quotes extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            newQuote: {\r\n                author: \"\",\r\n                body: \"\",\r\n            },\r\n\r\n            isLoggedIn: true,\r\n            quotes: [],\r\n            quotesComment: new Map()\r\n        }\r\n\r\n        this.setNewQuote = this.setNewQuote.bind(this);\r\n        this.postQuote = this.postQuote.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllQuotes();\r\n\r\n        const bc = new BroadcastChannel('sync-channel');\r\n        bc.onmessage = (message) => {\r\n            if (message.data.finished) {\r\n                this.getAllQuotes();\r\n            }\r\n        }\r\n    }\r\n\r\n    postQuote(event) {\r\n        event.preventDefault();\r\n\r\n        api(\"api/post/create\", \"post\", {...this.state.newQuote}).then((response) => {\r\n          console.log(response);\r\n            if (response.status === \"ok\") {\r\n                this.getAllQuotes();\r\n                //this.setState({\r\n                //  quotes: [ ...this.state.quotes, response.data ],\r\n                //});\r\n            }\r\n        }).catch((err) => console.log(err));\r\n    }\r\n\r\n    getAllQuotes = () => {\r\n        api(\"api/post\", \"get\", { } )\r\n        .then((res) => {\r\n            console.log('response', res);\r\n            if (res.status === \"error\") {\r\n                //this.setLogginState(false);\r\n                return;\r\n            }\r\n\r\n            if (res.status === \"login\") {\r\n                this.setLogginState(false);\r\n            }\r\n\r\n            if (!Array.isArray(res.data)) {\r\n                this.setQuotesState([]);\r\n                return;\r\n            }\r\n\r\n            const quotes = res.data;\r\n            this.setQuotesState(quotes);\r\n        }).catch((err) => console.log(err));\r\n    }\r\n    \r\n     postQuoteComment(quoteId, event) {\r\n        event.preventDefault();\r\n        if (this.state.quotesComment.has(quoteId)) {\r\n            api(`api/post/${quoteId}/comment`, \"post\", { text: this.state.quotesComment.get(quoteId) })\r\n            .then((res)=> {\r\n                api(\"api/post/\" + quoteId, \"get\", {}).then((res) => console.log(res)).catch((err) => console.log(err));\r\n                /*\r\n                this.setState(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        quotesComment: prevState.quotesComment.set(quoteId, \"\")\r\n                    }\r\n                })\r\n                */\r\n                console.log(\"returned comment from api\", res);\r\n            }).catch((err) => console.log(err));\r\n        }\r\n    }\r\n    \r\n\r\n    setLogginState(isLoggedIn) {\r\n        const newLogginState = Object.assign(this.state, {\r\n            isLoggedIn: isLoggedIn,\r\n        });\r\n\r\n        this.setState(newLogginState);\r\n    }\r\n\r\n    setQuotesState = (quotes) => {\r\n        this.setState(Object.assign(this.state, {\r\n            quotes: quotes,\r\n        }));\r\n    }\r\n\r\n    setNewQuote(event) {\r\n        this.setState((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                newQuote: {\r\n                    ...prevState.newQuote,\r\n                    [event.target.id]: event.target.value\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    setQuoteComment(quoteId, event) {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                quotesComment: prevState.quotesComment.set(quoteId, event.target.value)\r\n            }\r\n        })\r\n    }\r\n\r\n    getIniitalComment(quoteId) {\r\n        return this.state.quotesComment.has(quoteId) ? this.state.quotesComment.get(quoteId): \"\";\r\n    } \r\n\r\n\r\n    render() {\r\n        if (this.state.isLoggedIn === false) {\r\n            return(\r\n                <Container>\r\n                    <br />\r\n                        <Card.Text>\r\n                            <h3>You are not signed in!</h3>\r\n                            <p>Please, go back and <span>👉 </span><Link to='/signin'>sign in</Link></p>\r\n                        </Card.Text>\r\n                </Container>\r\n            );\r\n        }\r\n\r\n        let quotes = emptyCards;\r\n\r\n        if (this.state.quotes.length) {\r\n          quotes = this.state.quotes.map((quote, index) => {\r\n            return (\r\n                // --- div\r\n                <div key={quote.postId}>    \r\n                <Card>\r\n                    <Card.Body>\r\n                    <blockquote className=\"blockquote mb-0\">\r\n                    <p>\r\n                        {' '}\r\n                            {quote.body}\r\n                        {' '}\r\n                    </p>\r\n                    <footer className=\"blockquote-footer\">\r\n                        Someone famous in <cite title=\"Source Title\">{quote.author}</cite>\r\n                    </footer>\r\n                    </blockquote>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Card.Text>\r\n                            <Form onSubmit={(event) => this.postQuoteComment(quote.postId, event)}>\r\n                                <Form.Row className=\"align-items-center\">\r\n                                    <Col Col xs={7}>\r\n                                        <Form.Label htmlFor=\"inlineFormInput\" srOnly>\r\n                                            Comment\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            className=\"mb-2\"\r\n                                            id=\"inlineFormInput\"\r\n                                            placeholder=\"Comment...\"\r\n                                            value={this.getIniitalComment(quote.postId)}\r\n                                            onChange={(event) => this.setQuoteComment(quote.postId, event)}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col xs=\"auto\">\r\n                                        <Button type=\"submit\" variant=\"dark\" className=\"mb-2\" size=\"sm\">\r\n                                            Post\r\n                                        </Button>\r\n                                        <Link to={\"/\" + quote.postId} >\r\n                                            <div className=\"link-params\">\r\n                                                Open\r\n                                            </div>\r\n                                        </Link>\r\n                                    </Col>\r\n                                </Form.Row>\r\n                            </Form>\r\n                        </Card.Text>\r\n                    </Card.Footer>\r\n                </Card>\r\n                <br />\r\n                <br />\r\n                </div>\r\n                \r\n            );\r\n          });\r\n        }\r\n\r\n        return(\r\n            <Layout isLoggedIn={this.state.isLoggedIn}>\r\n                <div className=\"quotes-input\">\r\n                <Col md={{ span: 6, offset: 3 }}>\r\n                <Card.Body>\r\n                        <Card.Title>\r\n                            <p>Quotes goes here</p>\r\n                            <span role=\"img\" aria-label=\"pointing_down\"> 👇 </span>\r\n                        </Card.Title>\r\n                        <Card.Text>\r\n                            <Form onSubmit={this.postQuote}>\r\n                                <Form.Group controlId=\"author\">\r\n                                    <Form.Label> Author: </Form.Label>\r\n                                    <Form.Control type=\"text\" value={this.state.newQuote.author} onChange={this.setNewQuote} />\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"body\">\r\n                                    <Form.Label>Quote:</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows={3} value={this.state.newQuote.body} onChange={this.setNewQuote}/>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Button type=\"submit\" variant=\"dark\" size=\"sm\">Post</Button>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Col>\r\n                <Container>\r\n                {quotes}\r\n                </Container>\r\n                </div>\r\n          </Layout>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n\r\n    <Card.Title>\r\n        <p>Author: {quote.author}</p>\r\n    </Card.Title>\r\n    <Link to={\"/\" + quote.postId} >\r\n    <Card.Text>\r\n        Quote: {quote.body}\r\n    </Card.Text>\r\n    </Link>\r\n\r\n\r\n    <div className=\"quotes\">\r\n*/ \r\n\r\n/*  `quote_${index}`  */\r\n"],"sourceRoot":""}